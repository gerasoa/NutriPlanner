// <auto-generated />
using System;
using CCRS.Catalog.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCRS.Catalog.API.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20240830132009_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CCRS.Catalog.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Dificulty");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Direction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DirectionsGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("Step")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DirectionsGroupId");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.DirectionsGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("DirectionsGroup");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DirectionsGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectionsGroupId");

                    b.HasIndex("MeasureId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitLong")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UnitShort")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PublishedBy")
                        .HasColumnType("int");

                    b.Property<int>("ReadyInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Direction", b =>
                {
                    b.HasOne("CCRS.Catalog.API.Models.DirectionsGroup", null)
                        .WithMany("Directions")
                        .HasForeignKey("DirectionsGroupId");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.DirectionsGroup", b =>
                {
                    b.HasOne("CCRS.Catalog.API.Models.Recipe", null)
                        .WithMany("DirectionsGroup")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Feedback", b =>
                {
                    b.HasOne("CCRS.Catalog.API.Models.Recipe", "Recipe")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Ingredient", b =>
                {
                    b.HasOne("CCRS.Catalog.API.Models.DirectionsGroup", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DirectionsGroupId");

                    b.HasOne("CCRS.Catalog.API.Models.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Recipe", b =>
                {
                    b.HasOne("CCRS.Catalog.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CCRS.Catalog.API.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.Navigation("Category");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.DirectionsGroup", b =>
                {
                    b.Navigation("Directions");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CCRS.Catalog.API.Models.Recipe", b =>
                {
                    b.Navigation("DirectionsGroup");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
